
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programleftANDleftEQOPNEQleftLESSLESSEQGREATERGREATEREQleftPLUSMINUSleftTIMESDIVIDErightUNARYAND BANG BOOLEAN CLASS COMMA DIVIDE ELSE EQ EQOP EXTENDS FALSE GREATER GREATEREQ ID IF INT LBRACE LBRACK LESS LESSEQ LPAREN MAIN MINUS NEQ NEW NULL NUMBER PERIOD PLUS PUBLIC RBRACE RBRACK RETURN RPAREN SEMICOL STATIC STRING THEN THIS TIMES TRUE VOID WHILE\n        program : main_class_decl class_decl_or_empty\n        \n        main_class_decl : CLASS ID LBRACE main_method_decl RBRACE\n        \n        main_method_decl : PUBLIC STATIC VOID MAIN main_method_param scope\n        \n        main_method_param : LPAREN STRING LBRACK RBRACK ID RPAREN\n        \n        class_decl_or_empty : class_decl\n                            | empty\n        \n        class_decl : CLASS ID ext_or_empty LBRACE class_var_decl_or_empty method_decl_or_empty RBRACE\n        \n        ext_or_empty : extends\n                     | empty\n        \n        extends : EXTENDS ID\n        \n        class_var_decl_or_empty : class_var_decl\n                                | empty\n        \n        class_var_decl : type ID SEMICOL\n        \n        method_decl_or_empty : method_decl\n                             | empty\n        \n        method_decl : PUBLIC type ID method_param LBRACE stmts_or_empty ret_stmt RBRACE\n        \n        method_param : LPAREN formals_or_empty RPAREN\n        \n        formals_or_empty : formal_lst\n                         | empty\n        \n        formal_lst : formal_lst COMMA formal\n                   | formal\n        \n        formal : type ID\n        \n        scope : LBRACE stmts_or_empty RBRACE\n        \n        stmts_or_empty : stmt_lst\n                       | empty\n        \n        stmt_lst : stmt_lst stmt\n                 | stmt\n        \n        stmt : decl_stmt\n             | assign_stmt\n             | if_stmt\n             | while_stmt\n        \n        decl_stmt : type ID EQ expr SEMICOL\n        \n        assign_stmt : ID EQ expr SEMICOL\n        \n        if_stmt : IF LPAREN expr RPAREN scope ELSE scope\n        \n        while_stmt : WHILE LPAREN expr RPAREN scope\n        \n        ret_stmt : RETURN expr SEMICOL\n        \n        expr : NEW ID LPAREN RPAREN\n        \n        expr : expr PLUS expr\n             | expr MINUS expr\n             | expr TIMES expr\n             | expr DIVIDE expr\n             | expr LESS expr\n             | expr LESSEQ expr\n             | expr GREATER expr\n             | expr GREATEREQ expr\n             | expr EQOP expr\n             | expr NEQ expr\n             | expr AND expr\n        \n        expr : LPAREN expr RPAREN\n        \n        expr : MINUS expr %prec UNARY\n             | BANG expr %prec UNARY\n        \n        expr : NUMBER\n        \n        expr : TRUE\n             | FALSE\n        \n        expr : NULL\n        \n        expr : ID\n        \n        expr : THIS\n        \n        type : base_type\n             | ID\n        \n        base_type : INT\n                  | BOOLEAN\n                  | STRING\n                  | VOID\n        empty :'
    
_lr_action_items = {'CLASS':([0,2,19,],[3,7,-2,]),'$end':([1,2,4,5,6,19,38,],[0,-64,-1,-5,-6,-2,-7,]),'ID':([3,7,14,17,21,25,26,27,28,29,30,35,39,45,48,50,52,53,54,55,56,57,58,62,67,68,69,71,72,73,74,77,79,82,83,84,85,95,98,99,100,101,102,103,104,105,106,107,108,109,119,134,138,],[8,9,18,21,-59,36,-58,-60,-61,-62,-63,21,43,58,21,58,-27,-28,-29,-30,-31,70,-59,58,78,-23,-26,80,80,80,93,21,80,110,80,80,80,80,-33,80,80,80,80,80,80,80,80,80,80,80,-32,-35,-34,]),'LBRACE':([8,9,11,12,13,18,41,47,76,114,115,116,137,],[10,-64,17,-8,-9,-10,45,62,-17,45,45,-4,45,]),'EXTENDS':([9,],[14,]),'PUBLIC':([10,17,22,23,24,40,],[16,-64,35,-11,-12,-13,]),'RBRACE':([15,17,22,23,24,32,33,34,40,44,45,49,50,51,52,53,54,55,56,68,69,94,98,117,119,134,135,138,],[19,-64,-64,-11,-12,38,-14,-15,-13,-3,-64,68,-24,-25,-27,-28,-29,-30,-31,-23,-26,117,-33,-16,-32,-35,-36,-34,]),'STATIC':([16,],[20,]),'INT':([17,35,45,48,50,52,53,54,55,56,62,68,69,77,98,119,134,138,],[27,27,27,27,27,-27,-28,-29,-30,-31,27,-23,-26,27,-33,-32,-35,-34,]),'BOOLEAN':([17,35,45,48,50,52,53,54,55,56,62,68,69,77,98,119,134,138,],[28,28,28,28,28,-27,-28,-29,-30,-31,28,-23,-26,28,-33,-32,-35,-34,]),'STRING':([17,35,42,45,48,50,52,53,54,55,56,62,68,69,77,98,119,134,138,],[29,29,46,29,29,29,-27,-28,-29,-30,-31,29,-23,-26,29,-33,-32,-35,-34,]),'VOID':([17,20,35,45,48,50,52,53,54,55,56,62,68,69,77,98,119,134,138,],[30,31,30,30,30,30,-27,-28,-29,-30,-31,30,-23,-26,30,-33,-32,-35,-34,]),'MAIN':([31,],[37,]),'SEMICOL':([36,80,81,86,87,88,89,90,97,112,113,118,120,121,122,123,124,125,126,127,128,129,130,132,136,],[40,-56,98,-52,-53,-54,-55,-57,119,-50,-51,135,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-37,]),'LPAREN':([37,43,59,60,71,72,73,79,83,84,85,95,99,100,101,102,103,104,105,106,107,108,109,110,],[42,48,72,73,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,131,]),'IF':([45,50,52,53,54,55,56,62,68,69,98,119,134,138,],[59,59,-27,-28,-29,-30,-31,59,-23,-26,-33,-32,-35,-34,]),'WHILE':([45,50,52,53,54,55,56,62,68,69,98,119,134,138,],[60,60,-27,-28,-29,-30,-31,60,-23,-26,-33,-32,-35,-34,]),'LBRACK':([46,],[61,]),'RPAREN':([48,63,64,65,66,78,80,86,87,88,89,90,91,92,93,96,111,112,113,120,121,122,123,124,125,126,127,128,129,130,131,132,136,],[-64,76,-18,-19,-21,-22,-56,-52,-53,-54,-55,-57,114,115,116,-20,132,-50,-51,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,136,-49,-37,]),'RETURN':([50,51,52,53,54,55,56,62,68,69,75,98,119,134,138,],[-24,-25,-27,-28,-29,-30,-31,-64,-23,-26,95,-33,-32,-35,-34,]),'EQ':([58,70,],[71,79,]),'RBRACK':([61,],[74,]),'COMMA':([64,66,78,96,],[77,-21,-22,-20,]),'ELSE':([68,133,],[-23,137,]),'NEW':([71,72,73,79,83,84,85,95,99,100,101,102,103,104,105,106,107,108,109,],[82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,]),'MINUS':([71,72,73,79,80,81,83,84,85,86,87,88,89,90,91,92,95,97,99,100,101,102,103,104,105,106,107,108,109,111,112,113,118,120,121,122,123,124,125,126,127,128,129,130,132,136,],[84,84,84,84,-56,100,84,84,84,-52,-53,-54,-55,-57,100,100,84,100,84,84,84,84,84,84,84,84,84,84,84,100,-50,-51,100,-38,-39,-40,-41,100,100,100,100,100,100,100,-49,-37,]),'BANG':([71,72,73,79,83,84,85,95,99,100,101,102,103,104,105,106,107,108,109,],[85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,]),'NUMBER':([71,72,73,79,83,84,85,95,99,100,101,102,103,104,105,106,107,108,109,],[86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,]),'TRUE':([71,72,73,79,83,84,85,95,99,100,101,102,103,104,105,106,107,108,109,],[87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,]),'FALSE':([71,72,73,79,83,84,85,95,99,100,101,102,103,104,105,106,107,108,109,],[88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,]),'NULL':([71,72,73,79,83,84,85,95,99,100,101,102,103,104,105,106,107,108,109,],[89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,]),'THIS':([71,72,73,79,83,84,85,95,99,100,101,102,103,104,105,106,107,108,109,],[90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,]),'PLUS':([80,81,86,87,88,89,90,91,92,97,111,112,113,118,120,121,122,123,124,125,126,127,128,129,130,132,136,],[-56,99,-52,-53,-54,-55,-57,99,99,99,99,-50,-51,99,-38,-39,-40,-41,99,99,99,99,99,99,99,-49,-37,]),'TIMES':([80,81,86,87,88,89,90,91,92,97,111,112,113,118,120,121,122,123,124,125,126,127,128,129,130,132,136,],[-56,101,-52,-53,-54,-55,-57,101,101,101,101,-50,-51,101,101,101,-40,-41,101,101,101,101,101,101,101,-49,-37,]),'DIVIDE':([80,81,86,87,88,89,90,91,92,97,111,112,113,118,120,121,122,123,124,125,126,127,128,129,130,132,136,],[-56,102,-52,-53,-54,-55,-57,102,102,102,102,-50,-51,102,102,102,-40,-41,102,102,102,102,102,102,102,-49,-37,]),'LESS':([80,81,86,87,88,89,90,91,92,97,111,112,113,118,120,121,122,123,124,125,126,127,128,129,130,132,136,],[-56,103,-52,-53,-54,-55,-57,103,103,103,103,-50,-51,103,-38,-39,-40,-41,-42,-43,-44,-45,103,103,103,-49,-37,]),'LESSEQ':([80,81,86,87,88,89,90,91,92,97,111,112,113,118,120,121,122,123,124,125,126,127,128,129,130,132,136,],[-56,104,-52,-53,-54,-55,-57,104,104,104,104,-50,-51,104,-38,-39,-40,-41,-42,-43,-44,-45,104,104,104,-49,-37,]),'GREATER':([80,81,86,87,88,89,90,91,92,97,111,112,113,118,120,121,122,123,124,125,126,127,128,129,130,132,136,],[-56,105,-52,-53,-54,-55,-57,105,105,105,105,-50,-51,105,-38,-39,-40,-41,-42,-43,-44,-45,105,105,105,-49,-37,]),'GREATEREQ':([80,81,86,87,88,89,90,91,92,97,111,112,113,118,120,121,122,123,124,125,126,127,128,129,130,132,136,],[-56,106,-52,-53,-54,-55,-57,106,106,106,106,-50,-51,106,-38,-39,-40,-41,-42,-43,-44,-45,106,106,106,-49,-37,]),'EQOP':([80,81,86,87,88,89,90,91,92,97,111,112,113,118,120,121,122,123,124,125,126,127,128,129,130,132,136,],[-56,107,-52,-53,-54,-55,-57,107,107,107,107,-50,-51,107,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,107,-49,-37,]),'NEQ':([80,81,86,87,88,89,90,91,92,97,111,112,113,118,120,121,122,123,124,125,126,127,128,129,130,132,136,],[-56,108,-52,-53,-54,-55,-57,108,108,108,108,-50,-51,108,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,108,-49,-37,]),'AND':([80,81,86,87,88,89,90,91,92,97,111,112,113,118,120,121,122,123,124,125,126,127,128,129,130,132,136,],[-56,109,-52,-53,-54,-55,-57,109,109,109,109,-50,-51,109,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-37,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'main_class_decl':([0,],[2,]),'class_decl_or_empty':([2,],[4,]),'class_decl':([2,],[5,]),'empty':([2,9,17,22,45,48,62,],[6,13,24,34,51,65,51,]),'ext_or_empty':([9,],[11,]),'extends':([9,],[12,]),'main_method_decl':([10,],[15,]),'class_var_decl_or_empty':([17,],[22,]),'class_var_decl':([17,],[23,]),'type':([17,35,45,48,50,62,77,],[25,39,57,67,57,57,67,]),'base_type':([17,35,45,48,50,62,77,],[26,26,26,26,26,26,26,]),'method_decl_or_empty':([22,],[32,]),'method_decl':([22,],[33,]),'main_method_param':([37,],[41,]),'scope':([41,114,115,137,],[44,133,134,138,]),'method_param':([43,],[47,]),'stmts_or_empty':([45,62,],[49,75,]),'stmt_lst':([45,62,],[50,50,]),'stmt':([45,50,62,],[52,69,52,]),'decl_stmt':([45,50,62,],[53,53,53,]),'assign_stmt':([45,50,62,],[54,54,54,]),'if_stmt':([45,50,62,],[55,55,55,]),'while_stmt':([45,50,62,],[56,56,56,]),'formals_or_empty':([48,],[63,]),'formal_lst':([48,],[64,]),'formal':([48,77,],[66,96,]),'expr':([71,72,73,79,83,84,85,95,99,100,101,102,103,104,105,106,107,108,109,],[81,91,92,97,111,112,113,118,120,121,122,123,124,125,126,127,128,129,130,]),'ret_stmt':([75,],[94,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> main_class_decl class_decl_or_empty','program',2,'p_program','miniJavaParser.py',46),
  ('main_class_decl -> CLASS ID LBRACE main_method_decl RBRACE','main_class_decl',5,'p_main_class_decl','miniJavaParser.py',56),
  ('main_method_decl -> PUBLIC STATIC VOID MAIN main_method_param scope','main_method_decl',6,'p_main_method_decl','miniJavaParser.py',62),
  ('main_method_param -> LPAREN STRING LBRACK RBRACK ID RPAREN','main_method_param',6,'p_main_method_param','miniJavaParser.py',69),
  ('class_decl_or_empty -> class_decl','class_decl_or_empty',1,'p_class_decl_or_empty','miniJavaParser.py',79),
  ('class_decl_or_empty -> empty','class_decl_or_empty',1,'p_class_decl_or_empty','miniJavaParser.py',80),
  ('class_decl -> CLASS ID ext_or_empty LBRACE class_var_decl_or_empty method_decl_or_empty RBRACE','class_decl',7,'p_class_decl','miniJavaParser.py',86),
  ('ext_or_empty -> extends','ext_or_empty',1,'p_extend_or_empty','miniJavaParser.py',92),
  ('ext_or_empty -> empty','ext_or_empty',1,'p_extend_or_empty','miniJavaParser.py',93),
  ('extends -> EXTENDS ID','extends',2,'p_extend','miniJavaParser.py',99),
  ('class_var_decl_or_empty -> class_var_decl','class_var_decl_or_empty',1,'p_class_var_decl_or_empty','miniJavaParser.py',105),
  ('class_var_decl_or_empty -> empty','class_var_decl_or_empty',1,'p_class_var_decl_or_empty','miniJavaParser.py',106),
  ('class_var_decl -> type ID SEMICOL','class_var_decl',3,'p_class_var_decl','miniJavaParser.py',112),
  ('method_decl_or_empty -> method_decl','method_decl_or_empty',1,'p_method_decl_or_empty','miniJavaParser.py',122),
  ('method_decl_or_empty -> empty','method_decl_or_empty',1,'p_method_decl_or_empty','miniJavaParser.py',123),
  ('method_decl -> PUBLIC type ID method_param LBRACE stmts_or_empty ret_stmt RBRACE','method_decl',8,'p_method_decl','miniJavaParser.py',129),
  ('method_param -> LPAREN formals_or_empty RPAREN','method_param',3,'p_method_param','miniJavaParser.py',139),
  ('formals_or_empty -> formal_lst','formals_or_empty',1,'p_formals_or_empty','miniJavaParser.py',145),
  ('formals_or_empty -> empty','formals_or_empty',1,'p_formals_or_empty','miniJavaParser.py',146),
  ('formal_lst -> formal_lst COMMA formal','formal_lst',3,'p_formal_lst','miniJavaParser.py',155),
  ('formal_lst -> formal','formal_lst',1,'p_formal_lst','miniJavaParser.py',156),
  ('formal -> type ID','formal',2,'p_formal','miniJavaParser.py',165),
  ('scope -> LBRACE stmts_or_empty RBRACE','scope',3,'p_scope','miniJavaParser.py',175),
  ('stmts_or_empty -> stmt_lst','stmts_or_empty',1,'p_statements_or_empty','miniJavaParser.py',181),
  ('stmts_or_empty -> empty','stmts_or_empty',1,'p_statements_or_empty','miniJavaParser.py',182),
  ('stmt_lst -> stmt_lst stmt','stmt_lst',2,'p_statement_list','miniJavaParser.py',188),
  ('stmt_lst -> stmt','stmt_lst',1,'p_statement_list','miniJavaParser.py',189),
  ('stmt -> decl_stmt','stmt',1,'p_statement','miniJavaParser.py',198),
  ('stmt -> assign_stmt','stmt',1,'p_statement','miniJavaParser.py',199),
  ('stmt -> if_stmt','stmt',1,'p_statement','miniJavaParser.py',200),
  ('stmt -> while_stmt','stmt',1,'p_statement','miniJavaParser.py',201),
  ('decl_stmt -> type ID EQ expr SEMICOL','decl_stmt',5,'p_decl_statement','miniJavaParser.py',207),
  ('assign_stmt -> ID EQ expr SEMICOL','assign_stmt',4,'p_assignment_statement','miniJavaParser.py',213),
  ('if_stmt -> IF LPAREN expr RPAREN scope ELSE scope','if_stmt',7,'p_if_statement','miniJavaParser.py',219),
  ('while_stmt -> WHILE LPAREN expr RPAREN scope','while_stmt',5,'p_while_statement','miniJavaParser.py',225),
  ('ret_stmt -> RETURN expr SEMICOL','ret_stmt',3,'p_return_statement','miniJavaParser.py',231),
  ('expr -> NEW ID LPAREN RPAREN','expr',4,'p_expr_object_instance','miniJavaParser.py',242),
  ('expr -> expr PLUS expr','expr',3,'p_expr_binops','miniJavaParser.py',248),
  ('expr -> expr MINUS expr','expr',3,'p_expr_binops','miniJavaParser.py',249),
  ('expr -> expr TIMES expr','expr',3,'p_expr_binops','miniJavaParser.py',250),
  ('expr -> expr DIVIDE expr','expr',3,'p_expr_binops','miniJavaParser.py',251),
  ('expr -> expr LESS expr','expr',3,'p_expr_binops','miniJavaParser.py',252),
  ('expr -> expr LESSEQ expr','expr',3,'p_expr_binops','miniJavaParser.py',253),
  ('expr -> expr GREATER expr','expr',3,'p_expr_binops','miniJavaParser.py',254),
  ('expr -> expr GREATEREQ expr','expr',3,'p_expr_binops','miniJavaParser.py',255),
  ('expr -> expr EQOP expr','expr',3,'p_expr_binops','miniJavaParser.py',256),
  ('expr -> expr NEQ expr','expr',3,'p_expr_binops','miniJavaParser.py',257),
  ('expr -> expr AND expr','expr',3,'p_expr_binops','miniJavaParser.py',258),
  ('expr -> LPAREN expr RPAREN','expr',3,'p_expr_group','miniJavaParser.py',264),
  ('expr -> MINUS expr','expr',2,'p_expr_unary','miniJavaParser.py',270),
  ('expr -> BANG expr','expr',2,'p_expr_unary','miniJavaParser.py',271),
  ('expr -> NUMBER','expr',1,'p_expr_number','miniJavaParser.py',277),
  ('expr -> TRUE','expr',1,'p_expr_bool','miniJavaParser.py',283),
  ('expr -> FALSE','expr',1,'p_expr_bool','miniJavaParser.py',284),
  ('expr -> NULL','expr',1,'p_expr_null','miniJavaParser.py',290),
  ('expr -> ID','expr',1,'p_expr_id','miniJavaParser.py',296),
  ('expr -> THIS','expr',1,'p_expr_this','miniJavaParser.py',302),
  ('type -> base_type','type',1,'p_type','miniJavaParser.py',312),
  ('type -> ID','type',1,'p_type','miniJavaParser.py',313),
  ('base_type -> INT','base_type',1,'p_base_type','miniJavaParser.py',319),
  ('base_type -> BOOLEAN','base_type',1,'p_base_type','miniJavaParser.py',320),
  ('base_type -> STRING','base_type',1,'p_base_type','miniJavaParser.py',321),
  ('base_type -> VOID','base_type',1,'p_base_type','miniJavaParser.py',322),
  ('empty -> <empty>','empty',0,'p_empty','miniJavaParser.py',336),
]
